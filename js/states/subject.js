var State = require('ampersand-state');

//------------------------------------------------------------------------------

var Numbers = {
  PHI: 'phi',
  PI: 'pi',
  E: 'e'
};

//------------------------------------------------------------------------------

var fetch = (function() {
  var xhr = new XMLHttpRequest();

  return function(url, success, error) {
    // abort if any existing requests
    xhr.abort();

    xhr.open('GET', url, true);

    xhr.onload = function() {
      if (xhr.status >= 200 && xhr.status < 400) {
        success(xhr.responseText);
      } else {
        error("onload:error")
      }
    };

    xhr.onerror = function() {
      error("onerror:error");
    };

    xhr.send();
  }
})();

//------------------------------------------------------------------------------

var Num = State.extend({
  props: {
    name: ['string', true, ''],
    value: ['string', true, '']
  },

  digits: 3,
  maxDigits: 3,

  setDigits: function(n) {
    var url;
    var that = this;

    if (n < 3 || n > 6) return;

    this.digits = n;

    this.trigger('loading');

    if (n > this.maxDigits) {
      url = [
        "data/",
        this.name,
        "1",
        Array(n + 1).join("0"),
        ".csv"
      ].join("");

      fetch(url, function(value) {
        that.value = value;

        that.maxDigits = n;

        that.trigger('done');
      }, function() {});
    } else {
      this.trigger('done');
    }
  }
});

var Phi = Num.extend({
  props: {
    name: ['string', true, Numbers.PHI],
    value: {
      type: 'string',
      required: true,
      default: '16180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374847540880753868917521266338622235369317931800607667263544333890865959395829056383226613199282902678806752087668925017116962070322210432162695486262963136144381497587012203408058879544547492461856953648644492410443207713449470495658467885098743394422125448770664780915884607499887124007652170575179788341662562494075890697040002812104276217711177780531531714101170466659914669798731761356006708748071013179523689427521948435305678300228785699782977834784587822891109762500302696156170025046433824377648610283831268330372429267526311653392473167111211588186385133162038400522216579128667529465490681131715993432359734949850904094762132229810172610705961164562990981629055520852479035240602017279974717534277759277862561943208275051312181562855122248093947123414517022373580577278616008688382952304592647878017889921990270776903895321968198615143780314997411069260886742962267575605231727775203536139362',
    }
  }
});

var Pi = Num.extend({
  props: {
    name: ['string', true, Numbers.PI],
    value: {
      type: 'string',
      required: true,
      default: '31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989',
    }
  }
});

var E = Num.extend({
  props: {
    name: ['string', true, Numbers.E],
    value: {
      type: 'string',
      required: true,
      default: '27182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350354',
    }
  }
});

var SubjectState = State.extend({
  initialize: function() {
    var that = this;

    this.number = this.pi;

    // Fan-in loading and done events from children
    [this.phi, this.pi, this.e].forEach(function(num) {
      num.on('loading', function() {
        that.trigger('loading');
      });

      num.on('done', function() {
        that.trigger('done');
      });
    });
  },

  props: {
    name: ['string', true, Numbers.PI],
    digits: ['number', true, 3],
    number: 'state'
  },

  children: {
    phi: Phi,
    pi: Pi,
    e: E
  },

  derived: {
    value: {
      deps: ['number.value', 'digits'],
      fn: function() {
        // + 1 at the end to fill the final circle
        return this.number.value.substring(0, Math.pow(10, this.digits) + 1);
      }
    }
  },

  _setNum: function(name, num) {
    this.name = name;
    this.set({ number: num }, {
      // Avoid triggering change value event twice, in case setting digits will
      // also cause a a change event.
      silent: this.digits > num.maxDigits
    });
    num.setDigits(this.digits);
  },

  setPhi: function() {
    this._setNum(Numbers.PHI, this.phi);
  },

  setPi: function() {
    this._setNum(Numbers.PI, this.pi);
  },

  setE: function() {
    this._setNum(Numbers.E, this.e);
  },

  setDigits: function(d) {
    this.digits = d;
    this.number.setDigits(d);
  }
});

//------------------------------------------------------------------------------

module.exports = SubjectState;
